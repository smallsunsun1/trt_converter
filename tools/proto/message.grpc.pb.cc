// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sss {

static const char* RpcWork_method_names[] = {
  "/sss.RpcWork/RemoteCall",
  "/sss.RpcWork/RemoteStreamCall",
};

std::unique_ptr< RpcWork::Stub> RpcWork::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcWork::Stub> stub(new RpcWork::Stub(channel));
  return stub;
}

RpcWork::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RemoteCall_(RpcWork_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoteStreamCall_(RpcWork_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status RpcWork::Stub::RemoteCall(::grpc::ClientContext* context, const ::sss::Request& request, ::sss::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sss::Request, ::sss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoteCall_, context, request, response);
}

void RpcWork::Stub::experimental_async::RemoteCall(::grpc::ClientContext* context, const ::sss::Request* request, ::sss::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sss::Request, ::sss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoteCall_, context, request, response, std::move(f));
}

void RpcWork::Stub::experimental_async::RemoteCall(::grpc::ClientContext* context, const ::sss::Request* request, ::sss::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoteCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sss::Response>* RpcWork::Stub::PrepareAsyncRemoteCallRaw(::grpc::ClientContext* context, const ::sss::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sss::Response, ::sss::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoteCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sss::Response>* RpcWork::Stub::AsyncRemoteCallRaw(::grpc::ClientContext* context, const ::sss::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoteCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::sss::Request, ::sss::Response>* RpcWork::Stub::RemoteStreamCallRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sss::Request, ::sss::Response>::Create(channel_.get(), rpcmethod_RemoteStreamCall_, context);
}

void RpcWork::Stub::experimental_async::RemoteStreamCall(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::sss::Request,::sss::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sss::Request,::sss::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_RemoteStreamCall_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sss::Request, ::sss::Response>* RpcWork::Stub::AsyncRemoteStreamCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sss::Request, ::sss::Response>::Create(channel_.get(), cq, rpcmethod_RemoteStreamCall_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sss::Request, ::sss::Response>* RpcWork::Stub::PrepareAsyncRemoteStreamCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sss::Request, ::sss::Response>::Create(channel_.get(), cq, rpcmethod_RemoteStreamCall_, context, false, nullptr);
}

RpcWork::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcWork_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcWork::Service, ::sss::Request, ::sss::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcWork::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sss::Request* req,
             ::sss::Response* resp) {
               return service->RemoteCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcWork_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RpcWork::Service, ::sss::Request, ::sss::Response>(
          [](RpcWork::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sss::Response,
             ::sss::Request>* stream) {
               return service->RemoteStreamCall(ctx, stream);
             }, this)));
}

RpcWork::Service::~Service() {
}

::grpc::Status RpcWork::Service::RemoteCall(::grpc::ServerContext* context, const ::sss::Request* request, ::sss::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcWork::Service::RemoteStreamCall(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sss::Response, ::sss::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sss

